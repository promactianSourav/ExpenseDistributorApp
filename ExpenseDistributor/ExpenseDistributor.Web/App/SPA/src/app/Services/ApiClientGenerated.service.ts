/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.8.2.0 (NJsonSchema v10.2.1.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class ExpenseService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:5001";
    }

    getList(groupId: number): Observable<ExpenseAC[]> {
        let url_ = this.baseUrl + "/api/group/{groupId}/Expense";
        if (groupId === undefined || groupId === null)
            throw new Error("The parameter 'groupId' must be defined.");
        url_ = url_.replace("{groupId}", encodeURIComponent("" + groupId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetList(<any>response_);
                } catch (e) {
                    return <Observable<ExpenseAC[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<ExpenseAC[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetList(response: HttpResponseBase): Observable<ExpenseAC[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ExpenseAC.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ExpenseAC[]>(<any>null);
    }

    create(groupId: number, expenseAC: ExpenseAC): Observable<ExpenseAC> {
        let url_ = this.baseUrl + "/api/group/{groupId}/Expense";
        if (groupId === undefined || groupId === null)
            throw new Error("The parameter 'groupId' must be defined.");
        url_ = url_.replace("{groupId}", encodeURIComponent("" + groupId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(expenseAC);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<ExpenseAC>><any>_observableThrow(e);
                }
            } else
                return <Observable<ExpenseAC>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<ExpenseAC> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExpenseAC.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ExpenseAC>(<any>null);
    }

    getExpense(groupId: number, expenseId: number): Observable<ExpenseAC> {
        let url_ = this.baseUrl + "/api/group/{groupId}/Expense/{expenseId}/getexpense";
        if (groupId === undefined || groupId === null)
            throw new Error("The parameter 'groupId' must be defined.");
        url_ = url_.replace("{groupId}", encodeURIComponent("" + groupId));
        if (expenseId === undefined || expenseId === null)
            throw new Error("The parameter 'expenseId' must be defined.");
        url_ = url_.replace("{expenseId}", encodeURIComponent("" + expenseId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetExpense(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetExpense(<any>response_);
                } catch (e) {
                    return <Observable<ExpenseAC>><any>_observableThrow(e);
                }
            } else
                return <Observable<ExpenseAC>><any>_observableThrow(response_);
        }));
    }

    protected processGetExpense(response: HttpResponseBase): Observable<ExpenseAC> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExpenseAC.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ExpenseAC>(<any>null);
    }

    getListSplitTypes(groupId: number): Observable<SplitType[]> {
        let url_ = this.baseUrl + "/api/group/{groupId}/Expense/listsplitypes";
        if (groupId === undefined || groupId === null)
            throw new Error("The parameter 'groupId' must be defined.");
        url_ = url_.replace("{groupId}", encodeURIComponent("" + groupId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetListSplitTypes(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetListSplitTypes(<any>response_);
                } catch (e) {
                    return <Observable<SplitType[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<SplitType[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetListSplitTypes(response: HttpResponseBase): Observable<SplitType[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SplitType.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SplitType[]>(<any>null);
    }

    getListCurrencies(groupId: number): Observable<Currency[]> {
        let url_ = this.baseUrl + "/api/group/{groupId}/Expense/listcurrencies";
        if (groupId === undefined || groupId === null)
            throw new Error("The parameter 'groupId' must be defined.");
        url_ = url_.replace("{groupId}", encodeURIComponent("" + groupId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetListCurrencies(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetListCurrencies(<any>response_);
                } catch (e) {
                    return <Observable<Currency[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<Currency[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetListCurrencies(response: HttpResponseBase): Observable<Currency[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Currency.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Currency[]>(<any>null);
    }

    getExpenseCheckList(groupId: number, friendId: number): Observable<ExpenseCheckAC[]> {
        let url_ = this.baseUrl + "/api/group/{groupId}/Expense/{friendId}/getexpensechecklist";
        if (groupId === undefined || groupId === null)
            throw new Error("The parameter 'groupId' must be defined.");
        url_ = url_.replace("{groupId}", encodeURIComponent("" + groupId));
        if (friendId === undefined || friendId === null)
            throw new Error("The parameter 'friendId' must be defined.");
        url_ = url_.replace("{friendId}", encodeURIComponent("" + friendId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetExpenseCheckList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetExpenseCheckList(<any>response_);
                } catch (e) {
                    return <Observable<ExpenseCheckAC[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<ExpenseCheckAC[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetExpenseCheckList(response: HttpResponseBase): Observable<ExpenseCheckAC[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ExpenseCheckAC.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ExpenseCheckAC[]>(<any>null);
    }

    update(groupId: number, expenseId: number, expenseAC: ExpenseAC): Observable<ExpenseAC> {
        let url_ = this.baseUrl + "/api/group/{groupId}/Expense/{expenseId}";
        if (groupId === undefined || groupId === null)
            throw new Error("The parameter 'groupId' must be defined.");
        url_ = url_.replace("{groupId}", encodeURIComponent("" + groupId));
        if (expenseId === undefined || expenseId === null)
            throw new Error("The parameter 'expenseId' must be defined.");
        url_ = url_.replace("{expenseId}", encodeURIComponent("" + expenseId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(expenseAC);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<ExpenseAC>><any>_observableThrow(e);
                }
            } else
                return <Observable<ExpenseAC>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<ExpenseAC> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExpenseAC.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ExpenseAC>(<any>null);
    }
}

@Injectable()
export class FriendService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:5001";
    }

    getList(userId: number): Observable<FriendAC[]> {
        let url_ = this.baseUrl + "/api/user/{userId}/Friend";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetList(<any>response_);
                } catch (e) {
                    return <Observable<FriendAC[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<FriendAC[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetList(response: HttpResponseBase): Observable<FriendAC[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(FriendAC.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FriendAC[]>(<any>null);
    }

    create(userId: number, friendCreateAC: FriendCreateAC): Observable<FriendCreateAC> {
        let url_ = this.baseUrl + "/api/user/{userId}/Friend";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(friendCreateAC);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<FriendCreateAC>><any>_observableThrow(e);
                }
            } else
                return <Observable<FriendCreateAC>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<FriendCreateAC> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FriendCreateAC.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FriendCreateAC>(<any>null);
    }

    getFriend(userId: number, friendId: number): Observable<FriendAC> {
        let url_ = this.baseUrl + "/api/user/{userId}/Friend/{friendId}/getfriend";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        if (friendId === undefined || friendId === null)
            throw new Error("The parameter 'friendId' must be defined.");
        url_ = url_.replace("{friendId}", encodeURIComponent("" + friendId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetFriend(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetFriend(<any>response_);
                } catch (e) {
                    return <Observable<FriendAC>><any>_observableThrow(e);
                }
            } else
                return <Observable<FriendAC>><any>_observableThrow(response_);
        }));
    }

    protected processGetFriend(response: HttpResponseBase): Observable<FriendAC> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FriendAC.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FriendAC>(<any>null);
    }

    getDashboardTotals(userId: number): Observable<DashboardTotalAC> {
        let url_ = this.baseUrl + "/api/user/{userId}/Friend/dashboardtotals";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDashboardTotals(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDashboardTotals(<any>response_);
                } catch (e) {
                    return <Observable<DashboardTotalAC>><any>_observableThrow(e);
                }
            } else
                return <Observable<DashboardTotalAC>><any>_observableThrow(response_);
        }));
    }

    protected processGetDashboardTotals(response: HttpResponseBase): Observable<DashboardTotalAC> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DashboardTotalAC.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DashboardTotalAC>(<any>null);
    }

    getDashboardDetails(userId: number): Observable<OweOrOwedAC[]> {
        let url_ = this.baseUrl + "/api/user/{userId}/Friend/dashboard";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDashboardDetails(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDashboardDetails(<any>response_);
                } catch (e) {
                    return <Observable<OweOrOwedAC[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<OweOrOwedAC[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetDashboardDetails(response: HttpResponseBase): Observable<OweOrOwedAC[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(OweOrOwedAC.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<OweOrOwedAC[]>(<any>null);
    }

    update(userId: number, friendId: number, friendCreateAC: FriendCreateAC): Observable<FriendCreateAC> {
        let url_ = this.baseUrl + "/api/user/{userId}/Friend/{friendId}";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        if (friendId === undefined || friendId === null)
            throw new Error("The parameter 'friendId' must be defined.");
        url_ = url_.replace("{friendId}", encodeURIComponent("" + friendId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(friendCreateAC);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<FriendCreateAC>><any>_observableThrow(e);
                }
            } else
                return <Observable<FriendCreateAC>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<FriendCreateAC> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FriendCreateAC.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FriendCreateAC>(<any>null);
    }

    getListNonGroup(friendId: number, userId: string): Observable<TotalExpensesPerRelationshipAC[]> {
        let url_ = this.baseUrl + "/api/user/{userId}/Friend/{friendId}/nongrouptransaction";
        if (friendId === undefined || friendId === null)
            throw new Error("The parameter 'friendId' must be defined.");
        url_ = url_.replace("{friendId}", encodeURIComponent("" + friendId));
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetListNonGroup(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetListNonGroup(<any>response_);
                } catch (e) {
                    return <Observable<TotalExpensesPerRelationshipAC[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<TotalExpensesPerRelationshipAC[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetListNonGroup(response: HttpResponseBase): Observable<TotalExpensesPerRelationshipAC[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TotalExpensesPerRelationshipAC.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TotalExpensesPerRelationshipAC[]>(<any>null);
    }
}

@Injectable()
export class GroupService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:5001";
    }

    getList(userId: number): Observable<GroupListAC[]> {
        let url_ = this.baseUrl + "/api/Group/{userId}";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetList(<any>response_);
                } catch (e) {
                    return <Observable<GroupListAC[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<GroupListAC[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetList(response: HttpResponseBase): Observable<GroupListAC[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(GroupListAC.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GroupListAC[]>(<any>null);
    }

    getGroup(userId: number, groupId: number): Observable<GroupAC> {
        let url_ = this.baseUrl + "/api/Group/{userId}/{groupId}/getgroup";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        if (groupId === undefined || groupId === null)
            throw new Error("The parameter 'groupId' must be defined.");
        url_ = url_.replace("{groupId}", encodeURIComponent("" + groupId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetGroup(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetGroup(<any>response_);
                } catch (e) {
                    return <Observable<GroupAC>><any>_observableThrow(e);
                }
            } else
                return <Observable<GroupAC>><any>_observableThrow(response_);
        }));
    }

    protected processGetGroup(response: HttpResponseBase): Observable<GroupAC> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GroupAC.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GroupAC>(<any>null);
    }

    getGroupTypeList(userId: number): Observable<GroupTypeAC[]> {
        let url_ = this.baseUrl + "/api/Group/{userId}/grouptypelist";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetGroupTypeList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetGroupTypeList(<any>response_);
                } catch (e) {
                    return <Observable<GroupTypeAC[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<GroupTypeAC[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetGroupTypeList(response: HttpResponseBase): Observable<GroupTypeAC[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(GroupTypeAC.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GroupTypeAC[]>(<any>null);
    }

    getExpensesRecordForGroups(friendId: number, userId: number): Observable<LentBorrowAC[]> {
        let url_ = this.baseUrl + "/api/Group/{userId}/records/{friendId}";
        if (friendId === undefined || friendId === null)
            throw new Error("The parameter 'friendId' must be defined.");
        url_ = url_.replace("{friendId}", encodeURIComponent("" + friendId));
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetExpensesRecordForGroups(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetExpensesRecordForGroups(<any>response_);
                } catch (e) {
                    return <Observable<LentBorrowAC[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<LentBorrowAC[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetExpensesRecordForGroups(response: HttpResponseBase): Observable<LentBorrowAC[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(LentBorrowAC.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<LentBorrowAC[]>(<any>null);
    }

    create(userId: number, groupAC: GroupAC): Observable<GroupListAC> {
        let url_ = this.baseUrl + "/api/Group/{userId}/addgroup";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(groupAC);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<GroupListAC>><any>_observableThrow(e);
                }
            } else
                return <Observable<GroupListAC>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<GroupListAC> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GroupListAC.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GroupListAC>(<any>null);
    }

    addFriendInGroup(userId: number, groupedUserAC: GroupedUserAC): Observable<GroupedUserDetailsAC[]> {
        let url_ = this.baseUrl + "/api/Group/{userId}/addfriendingrp";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(groupedUserAC);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddFriendInGroup(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddFriendInGroup(<any>response_);
                } catch (e) {
                    return <Observable<GroupedUserDetailsAC[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<GroupedUserDetailsAC[]>><any>_observableThrow(response_);
        }));
    }

    protected processAddFriendInGroup(response: HttpResponseBase): Observable<GroupedUserDetailsAC[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(GroupedUserDetailsAC.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GroupedUserDetailsAC[]>(<any>null);
    }

    deleteFriendInGroup(userId: number, groupedUserAC: GroupedUserAC): Observable<GroupedUserDetailsAC[]> {
        let url_ = this.baseUrl + "/api/Group/{userId}/deletefriendingrp";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(groupedUserAC);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteFriendInGroup(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteFriendInGroup(<any>response_);
                } catch (e) {
                    return <Observable<GroupedUserDetailsAC[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<GroupedUserDetailsAC[]>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteFriendInGroup(response: HttpResponseBase): Observable<GroupedUserDetailsAC[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(GroupedUserDetailsAC.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GroupedUserDetailsAC[]>(<any>null);
    }

    getFriendInGroup(userId: number, groupId: number): Observable<GroupedUserDetailsAC[]> {
        let url_ = this.baseUrl + "/api/Group/{userId}/{groupId}/getfriendingrp";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        if (groupId === undefined || groupId === null)
            throw new Error("The parameter 'groupId' must be defined.");
        url_ = url_.replace("{groupId}", encodeURIComponent("" + groupId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetFriendInGroup(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetFriendInGroup(<any>response_);
                } catch (e) {
                    return <Observable<GroupedUserDetailsAC[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<GroupedUserDetailsAC[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetFriendInGroup(response: HttpResponseBase): Observable<GroupedUserDetailsAC[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(GroupedUserDetailsAC.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GroupedUserDetailsAC[]>(<any>null);
    }

    getEditGroupFriendDetails(userId: number, groupId: number): Observable<GroupedUserDetailsAC[]> {
        let url_ = this.baseUrl + "/api/Group/{userId}/{groupId}/geteditgroupfrienddetails";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        if (groupId === undefined || groupId === null)
            throw new Error("The parameter 'groupId' must be defined.");
        url_ = url_.replace("{groupId}", encodeURIComponent("" + groupId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetEditGroupFriendDetails(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetEditGroupFriendDetails(<any>response_);
                } catch (e) {
                    return <Observable<GroupedUserDetailsAC[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<GroupedUserDetailsAC[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetEditGroupFriendDetails(response: HttpResponseBase): Observable<GroupedUserDetailsAC[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(GroupedUserDetailsAC.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GroupedUserDetailsAC[]>(<any>null);
    }

    update(userId: number, groupId: number, groupAC: GroupAC): Observable<GroupListAC> {
        let url_ = this.baseUrl + "/api/Group/{userId}/{groupId}";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        if (groupId === undefined || groupId === null)
            throw new Error("The parameter 'groupId' must be defined.");
        url_ = url_.replace("{groupId}", encodeURIComponent("" + groupId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(groupAC);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<GroupListAC>><any>_observableThrow(e);
                }
            } else
                return <Observable<GroupListAC>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<GroupListAC> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GroupListAC.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GroupListAC>(<any>null);
    }
}

@Injectable()
export class SettlementService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:5001";
    }

    check(): Observable<MessageAC> {
        let url_ = this.baseUrl + "/api/group/Settlement/check";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCheck(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCheck(<any>response_);
                } catch (e) {
                    return <Observable<MessageAC>><any>_observableThrow(e);
                }
            } else
                return <Observable<MessageAC>><any>_observableThrow(response_);
        }));
    }

    protected processCheck(response: HttpResponseBase): Observable<MessageAC> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MessageAC.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<MessageAC>(<any>null);
    }

    getListForUser(friendId: number): Observable<SettlementAC[]> {
        let url_ = this.baseUrl + "/api/group/Settlement/{friendId}/nonexpensesettlement";
        if (friendId === undefined || friendId === null)
            throw new Error("The parameter 'friendId' must be defined.");
        url_ = url_.replace("{friendId}", encodeURIComponent("" + friendId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetListForUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetListForUser(<any>response_);
                } catch (e) {
                    return <Observable<SettlementAC[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<SettlementAC[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetListForUser(response: HttpResponseBase): Observable<SettlementAC[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SettlementAC.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SettlementAC[]>(<any>null);
    }

    createForUser(friendId: number, settlementAC: SettlementAC): Observable<SettlementAC> {
        let url_ = this.baseUrl + "/api/group/Settlement/{friendId}/nonexpensesettlement";
        if (friendId === undefined || friendId === null)
            throw new Error("The parameter 'friendId' must be defined.");
        url_ = url_.replace("{friendId}", encodeURIComponent("" + friendId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(settlementAC);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateForUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateForUser(<any>response_);
                } catch (e) {
                    return <Observable<SettlementAC>><any>_observableThrow(e);
                }
            } else
                return <Observable<SettlementAC>><any>_observableThrow(response_);
        }));
    }

    protected processCreateForUser(response: HttpResponseBase): Observable<SettlementAC> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SettlementAC.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SettlementAC>(<any>null);
    }

    getListForExpense(groupId: number, expenseId: number): Observable<SettlementPerExpenseAC[]> {
        let url_ = this.baseUrl + "/api/group/Settlement/{groupId}/{expenseId}/settlementsforexpense";
        if (groupId === undefined || groupId === null)
            throw new Error("The parameter 'groupId' must be defined.");
        url_ = url_.replace("{groupId}", encodeURIComponent("" + groupId));
        if (expenseId === undefined || expenseId === null)
            throw new Error("The parameter 'expenseId' must be defined.");
        url_ = url_.replace("{expenseId}", encodeURIComponent("" + expenseId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetListForExpense(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetListForExpense(<any>response_);
                } catch (e) {
                    return <Observable<SettlementPerExpenseAC[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<SettlementPerExpenseAC[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetListForExpense(response: HttpResponseBase): Observable<SettlementPerExpenseAC[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SettlementPerExpenseAC.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SettlementPerExpenseAC[]>(<any>null);
    }

    getSettlementsListForExpenseList(groupId: number): Observable<SettlementPerExpenseExpandAC[]> {
        let url_ = this.baseUrl + "/api/group/Settlement/{groupId}/getsettlementlistforexpenselist";
        if (groupId === undefined || groupId === null)
            throw new Error("The parameter 'groupId' must be defined.");
        url_ = url_.replace("{groupId}", encodeURIComponent("" + groupId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSettlementsListForExpenseList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSettlementsListForExpenseList(<any>response_);
                } catch (e) {
                    return <Observable<SettlementPerExpenseExpandAC[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<SettlementPerExpenseExpandAC[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetSettlementsListForExpenseList(response: HttpResponseBase): Observable<SettlementPerExpenseExpandAC[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SettlementPerExpenseExpandAC.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SettlementPerExpenseExpandAC[]>(<any>null);
    }

    createForExpense(groupId: number, expenseId: number, settlementPerExpenseAC: SettlementPerExpenseAC): Observable<SettlementPerExpenseAC> {
        let url_ = this.baseUrl + "/api/group/Settlement/{groupId}/{expenseId}/settlementforexpense";
        if (groupId === undefined || groupId === null)
            throw new Error("The parameter 'groupId' must be defined.");
        url_ = url_.replace("{groupId}", encodeURIComponent("" + groupId));
        if (expenseId === undefined || expenseId === null)
            throw new Error("The parameter 'expenseId' must be defined.");
        url_ = url_.replace("{expenseId}", encodeURIComponent("" + expenseId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(settlementPerExpenseAC);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateForExpense(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateForExpense(<any>response_);
                } catch (e) {
                    return <Observable<SettlementPerExpenseAC>><any>_observableThrow(e);
                }
            } else
                return <Observable<SettlementPerExpenseAC>><any>_observableThrow(response_);
        }));
    }

    protected processCreateForExpense(response: HttpResponseBase): Observable<SettlementPerExpenseAC> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SettlementPerExpenseAC.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SettlementPerExpenseAC>(<any>null);
    }
}

@Injectable()
export class UserService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:5001";
    }

    check(): Observable<MessageAC> {
        let url_ = this.baseUrl + "/api/User/check";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCheck(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCheck(<any>response_);
                } catch (e) {
                    return <Observable<MessageAC>><any>_observableThrow(e);
                }
            } else
                return <Observable<MessageAC>><any>_observableThrow(response_);
        }));
    }

    protected processCheck(response: HttpResponseBase): Observable<MessageAC> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MessageAC.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<MessageAC>(<any>null);
    }

    getlist(): Observable<UserAC[]> {
        let url_ = this.baseUrl + "/api/User/getusers";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetlist(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetlist(<any>response_);
                } catch (e) {
                    return <Observable<UserAC[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserAC[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetlist(response: HttpResponseBase): Observable<UserAC[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(UserAC.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserAC[]>(<any>null);
    }

    postLogin(loginAC: LoginAC): Observable<MessageAC> {
        let url_ = this.baseUrl + "/api/User/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(loginAC);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPostLogin(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPostLogin(<any>response_);
                } catch (e) {
                    return <Observable<MessageAC>><any>_observableThrow(e);
                }
            } else
                return <Observable<MessageAC>><any>_observableThrow(response_);
        }));
    }

    protected processPostLogin(response: HttpResponseBase): Observable<MessageAC> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MessageAC.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<MessageAC>(<any>null);
    }

    postRegister(userAC: UserAC): Observable<UserReturnAC> {
        let url_ = this.baseUrl + "/api/User/register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(userAC);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPostRegister(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPostRegister(<any>response_);
                } catch (e) {
                    return <Observable<UserReturnAC>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserReturnAC>><any>_observableThrow(response_);
        }));
    }

    protected processPostRegister(response: HttpResponseBase): Observable<UserReturnAC> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserReturnAC.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserReturnAC>(<any>null);
    }

    get(userId: number): Observable<UserReturnAC> {
        let url_ = this.baseUrl + "/api/User/{userId}";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<UserReturnAC>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserReturnAC>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<UserReturnAC> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserReturnAC.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserReturnAC>(<any>null);
    }

    update(userId: number, userReturnAC: UserReturnAC): Observable<UserReturnAC> {
        let url_ = this.baseUrl + "/api/User/{userId}";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(userReturnAC);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<UserReturnAC>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserReturnAC>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<UserReturnAC> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserReturnAC.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserReturnAC>(<any>null);
    }
}

export class ExpenseAC implements IExpenseAC {
    expenseName?: string | undefined;
    groupId!: number;
    payerFriendId!: number;
    debtFriendId!: number;
    creatorFriendId!: number;
    splitTypeId!: number;
    amount!: number;
    date?: string | undefined;
    currencyId!: number;

    constructor(data?: IExpenseAC) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.expenseName = _data["expenseName"];
            this.groupId = _data["groupId"];
            this.payerFriendId = _data["payerFriendId"];
            this.debtFriendId = _data["debtFriendId"];
            this.creatorFriendId = _data["creatorFriendId"];
            this.splitTypeId = _data["splitTypeId"];
            this.amount = _data["amount"];
            this.date = _data["date"];
            this.currencyId = _data["currencyId"];
        }
    }

    static fromJS(data: any): ExpenseAC {
        data = typeof data === 'object' ? data : {};
        let result = new ExpenseAC();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["expenseName"] = this.expenseName;
        data["groupId"] = this.groupId;
        data["payerFriendId"] = this.payerFriendId;
        data["debtFriendId"] = this.debtFriendId;
        data["creatorFriendId"] = this.creatorFriendId;
        data["splitTypeId"] = this.splitTypeId;
        data["amount"] = this.amount;
        data["date"] = this.date;
        data["currencyId"] = this.currencyId;
        return data; 
    }
}

export interface IExpenseAC {
    expenseName?: string | undefined;
    groupId: number;
    payerFriendId: number;
    debtFriendId: number;
    creatorFriendId: number;
    splitTypeId: number;
    amount: number;
    date?: string | undefined;
    currencyId: number;
}

export class SplitType implements ISplitType {
    splitTypeId!: number;
    splitTypeName!: string;
    value!: number;

    constructor(data?: ISplitType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.splitTypeId = _data["splitTypeId"];
            this.splitTypeName = _data["splitTypeName"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): SplitType {
        data = typeof data === 'object' ? data : {};
        let result = new SplitType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["splitTypeId"] = this.splitTypeId;
        data["splitTypeName"] = this.splitTypeName;
        data["value"] = this.value;
        return data; 
    }
}

export interface ISplitType {
    splitTypeId: number;
    splitTypeName: string;
    value: number;
}

export class Currency implements ICurrency {
    currencyId!: number;
    currencyName!: string;
    currencyValue!: number;

    constructor(data?: ICurrency) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.currencyId = _data["currencyId"];
            this.currencyName = _data["currencyName"];
            this.currencyValue = _data["currencyValue"];
        }
    }

    static fromJS(data: any): Currency {
        data = typeof data === 'object' ? data : {};
        let result = new Currency();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["currencyId"] = this.currencyId;
        data["currencyName"] = this.currencyName;
        data["currencyValue"] = this.currencyValue;
        return data; 
    }
}

export interface ICurrency {
    currencyId: number;
    currencyName: string;
    currencyValue: number;
}

export class ExpenseCheckAC implements IExpenseCheckAC {
    expenseId!: number;
    expenseName?: string | undefined;
    lentOrBorrowCheck!: number;
    payerFriendName?: string | undefined;
    debtFriendName?: string | undefined;
    amount!: number;
    date?: string | undefined;

    constructor(data?: IExpenseCheckAC) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.expenseId = _data["expenseId"];
            this.expenseName = _data["expenseName"];
            this.lentOrBorrowCheck = _data["lentOrBorrowCheck"];
            this.payerFriendName = _data["payerFriendName"];
            this.debtFriendName = _data["debtFriendName"];
            this.amount = _data["amount"];
            this.date = _data["date"];
        }
    }

    static fromJS(data: any): ExpenseCheckAC {
        data = typeof data === 'object' ? data : {};
        let result = new ExpenseCheckAC();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["expenseId"] = this.expenseId;
        data["expenseName"] = this.expenseName;
        data["lentOrBorrowCheck"] = this.lentOrBorrowCheck;
        data["payerFriendName"] = this.payerFriendName;
        data["debtFriendName"] = this.debtFriendName;
        data["amount"] = this.amount;
        data["date"] = this.date;
        return data; 
    }
}

export interface IExpenseCheckAC {
    expenseId: number;
    expenseName?: string | undefined;
    lentOrBorrowCheck: number;
    payerFriendName?: string | undefined;
    debtFriendName?: string | undefined;
    amount: number;
    date?: string | undefined;
}

export class FriendAC implements IFriendAC {
    friendId!: number;
    name?: string | undefined;
    email?: string | undefined;
    phoneNumber?: string | undefined;
    creatorUserId!: number;
    date?: string | undefined;

    constructor(data?: IFriendAC) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.friendId = _data["friendId"];
            this.name = _data["name"];
            this.email = _data["email"];
            this.phoneNumber = _data["phoneNumber"];
            this.creatorUserId = _data["creatorUserId"];
            this.date = _data["date"];
        }
    }

    static fromJS(data: any): FriendAC {
        data = typeof data === 'object' ? data : {};
        let result = new FriendAC();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["friendId"] = this.friendId;
        data["name"] = this.name;
        data["email"] = this.email;
        data["phoneNumber"] = this.phoneNumber;
        data["creatorUserId"] = this.creatorUserId;
        data["date"] = this.date;
        return data; 
    }
}

export interface IFriendAC {
    friendId: number;
    name?: string | undefined;
    email?: string | undefined;
    phoneNumber?: string | undefined;
    creatorUserId: number;
    date?: string | undefined;
}

export class DashboardTotalAC implements IDashboardTotalAC {
    oweAmount!: number;
    owedAmount!: number;

    constructor(data?: IDashboardTotalAC) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.oweAmount = _data["oweAmount"];
            this.owedAmount = _data["owedAmount"];
        }
    }

    static fromJS(data: any): DashboardTotalAC {
        data = typeof data === 'object' ? data : {};
        let result = new DashboardTotalAC();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["oweAmount"] = this.oweAmount;
        data["owedAmount"] = this.owedAmount;
        return data; 
    }
}

export interface IDashboardTotalAC {
    oweAmount: number;
    owedAmount: number;
}

export class OweOrOwedAC implements IOweOrOwedAC {
    oweOrOwedId!: number;
    friendName?: string | undefined;
    listExpenses?: ExpenseExpandAC[] | undefined;

    constructor(data?: IOweOrOwedAC) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.oweOrOwedId = _data["oweOrOwedId"];
            this.friendName = _data["friendName"];
            if (Array.isArray(_data["listExpenses"])) {
                this.listExpenses = [] as any;
                for (let item of _data["listExpenses"])
                    this.listExpenses!.push(ExpenseExpandAC.fromJS(item));
            }
        }
    }

    static fromJS(data: any): OweOrOwedAC {
        data = typeof data === 'object' ? data : {};
        let result = new OweOrOwedAC();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["oweOrOwedId"] = this.oweOrOwedId;
        data["friendName"] = this.friendName;
        if (Array.isArray(this.listExpenses)) {
            data["listExpenses"] = [];
            for (let item of this.listExpenses)
                data["listExpenses"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IOweOrOwedAC {
    oweOrOwedId: number;
    friendName?: string | undefined;
    listExpenses?: ExpenseExpandAC[] | undefined;
}

export class ExpenseExpandAC implements IExpenseExpandAC {
    expenseName?: string | undefined;
    groupName?: string | undefined;
    payerFriendName?: string | undefined;
    debtFriendName?: string | undefined;
    creatorFriendName?: string | undefined;
    splitTypeName?: string | undefined;
    amount!: number;
    date?: string | undefined;
    currencyName?: string | undefined;

    constructor(data?: IExpenseExpandAC) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.expenseName = _data["expenseName"];
            this.groupName = _data["groupName"];
            this.payerFriendName = _data["payerFriendName"];
            this.debtFriendName = _data["debtFriendName"];
            this.creatorFriendName = _data["creatorFriendName"];
            this.splitTypeName = _data["splitTypeName"];
            this.amount = _data["amount"];
            this.date = _data["date"];
            this.currencyName = _data["currencyName"];
        }
    }

    static fromJS(data: any): ExpenseExpandAC {
        data = typeof data === 'object' ? data : {};
        let result = new ExpenseExpandAC();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["expenseName"] = this.expenseName;
        data["groupName"] = this.groupName;
        data["payerFriendName"] = this.payerFriendName;
        data["debtFriendName"] = this.debtFriendName;
        data["creatorFriendName"] = this.creatorFriendName;
        data["splitTypeName"] = this.splitTypeName;
        data["amount"] = this.amount;
        data["date"] = this.date;
        data["currencyName"] = this.currencyName;
        return data; 
    }
}

export interface IExpenseExpandAC {
    expenseName?: string | undefined;
    groupName?: string | undefined;
    payerFriendName?: string | undefined;
    debtFriendName?: string | undefined;
    creatorFriendName?: string | undefined;
    splitTypeName?: string | undefined;
    amount: number;
    date?: string | undefined;
    currencyName?: string | undefined;
}

export class FriendCreateAC implements IFriendCreateAC {
    name?: string | undefined;
    email?: string | undefined;
    phoneNumber?: string | undefined;
    creatorUserId!: number;
    date?: string | undefined;

    constructor(data?: IFriendCreateAC) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.email = _data["email"];
            this.phoneNumber = _data["phoneNumber"];
            this.creatorUserId = _data["creatorUserId"];
            this.date = _data["date"];
        }
    }

    static fromJS(data: any): FriendCreateAC {
        data = typeof data === 'object' ? data : {};
        let result = new FriendCreateAC();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["email"] = this.email;
        data["phoneNumber"] = this.phoneNumber;
        data["creatorUserId"] = this.creatorUserId;
        data["date"] = this.date;
        return data; 
    }
}

export interface IFriendCreateAC {
    name?: string | undefined;
    email?: string | undefined;
    phoneNumber?: string | undefined;
    creatorUserId: number;
    date?: string | undefined;
}

export class TotalExpensesPerRelationshipAC implements ITotalExpensesPerRelationshipAC {
    payerFriendId!: number;
    debtFriendId!: number;
    amount!: number;

    constructor(data?: ITotalExpensesPerRelationshipAC) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.payerFriendId = _data["payerFriendId"];
            this.debtFriendId = _data["debtFriendId"];
            this.amount = _data["amount"];
        }
    }

    static fromJS(data: any): TotalExpensesPerRelationshipAC {
        data = typeof data === 'object' ? data : {};
        let result = new TotalExpensesPerRelationshipAC();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["payerFriendId"] = this.payerFriendId;
        data["debtFriendId"] = this.debtFriendId;
        data["amount"] = this.amount;
        return data; 
    }
}

export interface ITotalExpensesPerRelationshipAC {
    payerFriendId: number;
    debtFriendId: number;
    amount: number;
}

export class GroupListAC implements IGroupListAC {
    groupId!: number;
    groupName?: string | undefined;
    groupTypeId!: number;

    constructor(data?: IGroupListAC) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.groupId = _data["groupId"];
            this.groupName = _data["groupName"];
            this.groupTypeId = _data["groupTypeId"];
        }
    }

    static fromJS(data: any): GroupListAC {
        data = typeof data === 'object' ? data : {};
        let result = new GroupListAC();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["groupId"] = this.groupId;
        data["groupName"] = this.groupName;
        data["groupTypeId"] = this.groupTypeId;
        return data; 
    }
}

export interface IGroupListAC {
    groupId: number;
    groupName?: string | undefined;
    groupTypeId: number;
}

export class GroupAC implements IGroupAC {
    groupName?: string | undefined;
    groupTypeId!: number;

    constructor(data?: IGroupAC) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.groupName = _data["groupName"];
            this.groupTypeId = _data["groupTypeId"];
        }
    }

    static fromJS(data: any): GroupAC {
        data = typeof data === 'object' ? data : {};
        let result = new GroupAC();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["groupName"] = this.groupName;
        data["groupTypeId"] = this.groupTypeId;
        return data; 
    }
}

export interface IGroupAC {
    groupName?: string | undefined;
    groupTypeId: number;
}

export class GroupTypeAC implements IGroupTypeAC {
    groupTypeId!: number;
    groupTypeName?: string | undefined;

    constructor(data?: IGroupTypeAC) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.groupTypeId = _data["groupTypeId"];
            this.groupTypeName = _data["groupTypeName"];
        }
    }

    static fromJS(data: any): GroupTypeAC {
        data = typeof data === 'object' ? data : {};
        let result = new GroupTypeAC();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["groupTypeId"] = this.groupTypeId;
        data["groupTypeName"] = this.groupTypeName;
        return data; 
    }
}

export interface IGroupTypeAC {
    groupTypeId: number;
    groupTypeName?: string | undefined;
}

export class LentBorrowAC implements ILentBorrowAC {
    groupId!: number;
    groupName?: string | undefined;
    lentAmount!: number;
    borrowAmount!: number;

    constructor(data?: ILentBorrowAC) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.groupId = _data["groupId"];
            this.groupName = _data["groupName"];
            this.lentAmount = _data["lentAmount"];
            this.borrowAmount = _data["borrowAmount"];
        }
    }

    static fromJS(data: any): LentBorrowAC {
        data = typeof data === 'object' ? data : {};
        let result = new LentBorrowAC();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["groupId"] = this.groupId;
        data["groupName"] = this.groupName;
        data["lentAmount"] = this.lentAmount;
        data["borrowAmount"] = this.borrowAmount;
        return data; 
    }
}

export interface ILentBorrowAC {
    groupId: number;
    groupName?: string | undefined;
    lentAmount: number;
    borrowAmount: number;
}

export class GroupedUserDetailsAC implements IGroupedUserDetailsAC {
    groupId!: number;
    groupsFriendId!: number;
    groupsFriendName?: string | undefined;
    groupsFriendEmail?: string | undefined;
    amount!: number;

    constructor(data?: IGroupedUserDetailsAC) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.groupId = _data["groupId"];
            this.groupsFriendId = _data["groupsFriendId"];
            this.groupsFriendName = _data["groupsFriendName"];
            this.groupsFriendEmail = _data["groupsFriendEmail"];
            this.amount = _data["amount"];
        }
    }

    static fromJS(data: any): GroupedUserDetailsAC {
        data = typeof data === 'object' ? data : {};
        let result = new GroupedUserDetailsAC();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["groupId"] = this.groupId;
        data["groupsFriendId"] = this.groupsFriendId;
        data["groupsFriendName"] = this.groupsFriendName;
        data["groupsFriendEmail"] = this.groupsFriendEmail;
        data["amount"] = this.amount;
        return data; 
    }
}

export interface IGroupedUserDetailsAC {
    groupId: number;
    groupsFriendId: number;
    groupsFriendName?: string | undefined;
    groupsFriendEmail?: string | undefined;
    amount: number;
}

export class GroupedUserAC implements IGroupedUserAC {
    groupId!: number;
    groupsFriendId!: number;

    constructor(data?: IGroupedUserAC) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.groupId = _data["groupId"];
            this.groupsFriendId = _data["groupsFriendId"];
        }
    }

    static fromJS(data: any): GroupedUserAC {
        data = typeof data === 'object' ? data : {};
        let result = new GroupedUserAC();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["groupId"] = this.groupId;
        data["groupsFriendId"] = this.groupsFriendId;
        return data; 
    }
}

export interface IGroupedUserAC {
    groupId: number;
    groupsFriendId: number;
}

export class MessageAC implements IMessageAC {
    userId!: number;
    friendUserId!: number;
    name?: string | undefined;
    message?: string | undefined;

    constructor(data?: IMessageAC) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.friendUserId = _data["friendUserId"];
            this.name = _data["name"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): MessageAC {
        data = typeof data === 'object' ? data : {};
        let result = new MessageAC();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["friendUserId"] = this.friendUserId;
        data["name"] = this.name;
        data["message"] = this.message;
        return data; 
    }
}

export interface IMessageAC {
    userId: number;
    friendUserId: number;
    name?: string | undefined;
    message?: string | undefined;
}

export class SettlementAC implements ISettlementAC {
    payerFriendId!: number;
    debtFriendId!: number;
    amount!: number;
    date?: string | undefined;
    currencyId!: number;

    constructor(data?: ISettlementAC) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.payerFriendId = _data["payerFriendId"];
            this.debtFriendId = _data["debtFriendId"];
            this.amount = _data["amount"];
            this.date = _data["date"];
            this.currencyId = _data["currencyId"];
        }
    }

    static fromJS(data: any): SettlementAC {
        data = typeof data === 'object' ? data : {};
        let result = new SettlementAC();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["payerFriendId"] = this.payerFriendId;
        data["debtFriendId"] = this.debtFriendId;
        data["amount"] = this.amount;
        data["date"] = this.date;
        data["currencyId"] = this.currencyId;
        return data; 
    }
}

export interface ISettlementAC {
    payerFriendId: number;
    debtFriendId: number;
    amount: number;
    date?: string | undefined;
    currencyId: number;
}

export class SettlementPerExpenseAC implements ISettlementPerExpenseAC {
    expenseId!: number;
    payerFriendId!: number;
    debtFriendId!: number;
    amount!: number;
    date?: string | undefined;
    currencyId!: number;

    constructor(data?: ISettlementPerExpenseAC) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.expenseId = _data["expenseId"];
            this.payerFriendId = _data["payerFriendId"];
            this.debtFriendId = _data["debtFriendId"];
            this.amount = _data["amount"];
            this.date = _data["date"];
            this.currencyId = _data["currencyId"];
        }
    }

    static fromJS(data: any): SettlementPerExpenseAC {
        data = typeof data === 'object' ? data : {};
        let result = new SettlementPerExpenseAC();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["expenseId"] = this.expenseId;
        data["payerFriendId"] = this.payerFriendId;
        data["debtFriendId"] = this.debtFriendId;
        data["amount"] = this.amount;
        data["date"] = this.date;
        data["currencyId"] = this.currencyId;
        return data; 
    }
}

export interface ISettlementPerExpenseAC {
    expenseId: number;
    payerFriendId: number;
    debtFriendId: number;
    amount: number;
    date?: string | undefined;
    currencyId: number;
}

export class SettlementPerExpenseExpandAC implements ISettlementPerExpenseExpandAC {
    expenseName?: string | undefined;
    payerFriendName?: string | undefined;
    debtFriendName?: string | undefined;
    amount!: number;
    date?: string | undefined;

    constructor(data?: ISettlementPerExpenseExpandAC) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.expenseName = _data["expenseName"];
            this.payerFriendName = _data["payerFriendName"];
            this.debtFriendName = _data["debtFriendName"];
            this.amount = _data["amount"];
            this.date = _data["date"];
        }
    }

    static fromJS(data: any): SettlementPerExpenseExpandAC {
        data = typeof data === 'object' ? data : {};
        let result = new SettlementPerExpenseExpandAC();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["expenseName"] = this.expenseName;
        data["payerFriendName"] = this.payerFriendName;
        data["debtFriendName"] = this.debtFriendName;
        data["amount"] = this.amount;
        data["date"] = this.date;
        return data; 
    }
}

export interface ISettlementPerExpenseExpandAC {
    expenseName?: string | undefined;
    payerFriendName?: string | undefined;
    debtFriendName?: string | undefined;
    amount: number;
    date?: string | undefined;
}

export class UserAC implements IUserAC {
    name?: string | undefined;
    email?: string | undefined;
    password?: string | undefined;
    phoneNumber?: string | undefined;

    constructor(data?: IUserAC) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.email = _data["email"];
            this.password = _data["password"];
            this.phoneNumber = _data["phoneNumber"];
        }
    }

    static fromJS(data: any): UserAC {
        data = typeof data === 'object' ? data : {};
        let result = new UserAC();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["email"] = this.email;
        data["password"] = this.password;
        data["phoneNumber"] = this.phoneNumber;
        return data; 
    }
}

export interface IUserAC {
    name?: string | undefined;
    email?: string | undefined;
    password?: string | undefined;
    phoneNumber?: string | undefined;
}

export class LoginAC implements ILoginAC {
    email?: string | undefined;
    password?: string | undefined;

    constructor(data?: ILoginAC) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): LoginAC {
        data = typeof data === 'object' ? data : {};
        let result = new LoginAC();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["password"] = this.password;
        return data; 
    }
}

export interface ILoginAC {
    email?: string | undefined;
    password?: string | undefined;
}

export class UserReturnAC implements IUserReturnAC {
    name?: string | undefined;
    email?: string | undefined;
    phoneNumber?: string | undefined;

    constructor(data?: IUserReturnAC) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.email = _data["email"];
            this.phoneNumber = _data["phoneNumber"];
        }
    }

    static fromJS(data: any): UserReturnAC {
        data = typeof data === 'object' ? data : {};
        let result = new UserReturnAC();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["email"] = this.email;
        data["phoneNumber"] = this.phoneNumber;
        return data; 
    }
}

export interface IUserReturnAC {
    name?: string | undefined;
    email?: string | undefined;
    phoneNumber?: string | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}